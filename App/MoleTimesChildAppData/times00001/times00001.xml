<?xml version="1.0" encoding="UTF-8"?>
<moleTimes>
<head>
	<weather>
		<subweather>sun,sun,sun,sun,sun,sun,sun</subweather>
		<subweather>sun,sun,sun,sun,sun,sun,sun</subweather>
		<subweather>sun,sun,sun,sun,sun,sun,sun</subweather>
		<subweather>sun,sun,sun,sun,sun,sun,sun</subweather>
		<subweather>sun,sun,sun,sun,sun,sun,sun</subweather>
		<subweather>sun,sun,sun,sun,sun,sun,sun</subweather>
		<subweather>sun,sun,sun,sun,sun,sun,sun</subweather>
	</weather>
	<activity>
		<act>1</act>
		<act>1</act>
		<act>1</act>
		<act>1</act>
		<act>1</act>
		<act>1</act>
		<act>1</act>
	</activity>
	<serialNum>1</serialNum>
	<date>4713-7-23</date>
	<tutor>
		<li>导读1</li>
		<li>导读2</li>
		<li>导读3</li>
		<li>导读4</li>
		<li>导读5</li>
	</tutor>	
</head>
<body>
	<!--如果有专页，这里值为1，否为0，专页占4个板块-->
	<hasSuperPage>0</hasSuperPage>
	<!--Grid1-->
	<artical>
		<head>摩尔庄园2好棒!</head>
		<subHead>摩尔庄园2好棒!</subHead>
		<writer>小乐仔</writer>
		<image>App/MoleTimesChildAppData/times00001/imageData/img1.jpg</image>
		<sampleText>
			AS3的域可以看成是“类定义存放区”，我们在编写AS3代码时，需要设计大量的类，每个类都有自身的定义（包括类名、方法和属性的定义），那么这些类定义存放于什么位置呢？它们就存放与域中。当你通过"new 类名"来创建一个类的实例时，如果更深的想一想，就会提出这样一个问题：编译器是怎样知道我们要创建的到底是哪个类的实例呢？这就是因为"类名"与类定义的地址将以一一对应的形式存放于域内,就会自动去域内寻找与new运算符后的类名相匹配的定义，然后再根据该定义获得类定义地址，这样就能开辟一片新的内存区来存放你的新对象了。
		</sampleText>
		<detial>
			detail1.........
		</detial>
	</artical>
	<!--Grid2-->
	<artical>
		<head>摩尔庄园2好棒!</head>
		<subHead>摩尔庄园2好棒!</subHead>
		<writer>佚名</writer>
		<image>App/MoleTimesChildAppData/times00001/imageData/img1.jpg</image>
		<sampleText>
			编译器是怎样知道我们要创建的到底是哪个类的实例呢？这就是因为"类名"与类定义的地址将以一一对应的形式存放于域内,就会自动去域内寻找与new运算符后的类名相匹配的定义，该定义获得类定义地址，这样就能开辟一片新的内存区来存放你的新对象了。
		</sampleText>
		<detial>
			detail2.........
		</detial>
	</artical>
	<!--Grid3-->
	<artical>
		<head>摩尔庄园2好棒!</head>
		<subHead>摩尔庄园2好棒!</subHead>
		<writer>佚名</writer>
		<image>App/MoleTimesChildAppData/times00001/imageData/img1.jpg</image>
		<sampleText>
			编译器是怎样知道我们要创建的到底是哪个类的实例呢？这就是因为"类名"与类定义的地址将以一一对应的形式存放于域内。
		</sampleText>
		<detial>
			detail3.........
		</detial>
	</artical>
	<!--Grid4-->
	<artical>
		<head>摩尔庄园2好棒!</head>
		<subHead>摩尔庄园2好棒!</subHead>
		<writer>佚名</writer>
		<image>App/MoleTimesChildAppData/times00001/imageData/img1.jpg</image>
		<sampleText>
			编译器是怎样知道我们要创建的到底是哪个类的实例呢？这就是因为"类名"与类定义的地址将以一一对应的形式存放于域内,就会自动去域内寻找与new运算符后的类名相匹配的定义。
		</sampleText>
		<detial>
			detail4.........
		</detial>
	</artical>
	<!--Grid5-->
	<artical>
		<head>大标题</head>
		<subHead>小标题</subHead><!--不用填-->
		<writer>佚名</writer>
		<image>App/MoleTimesChildAppData/times00001/imageData/img1.jpg</image>
		<sampleText>
			文字内容巴拉巴拉
		</sampleText>
		<detial>
			detail5.........
		</detial>
	</artical>
	<!--Grid6-->
	<artical>
		<head>大标题</head>
		<subHead>小标题</subHead>
		<writer>佚名</writer>
		<image>App/MoleTimesChildAppData/times00001/imageData/img1.jpg</image>
		<sampleText>
			文字内容巴拉巴拉
		</sampleText>
		<detial>
			detail6.........
		</detial>
	</artical>
	<!--Grid7-->
	<artical>
		<head>大标题</head>
		<subHead>小标题</subHead>
		<writer>佚名</writer>
		<image>App/MoleTimesChildAppData/times00001/imageData/img1.jpg</image>
		<sampleText>
			文字内容巴拉巴拉
		</sampleText>
		<detial>
			detail7.........
		</detial>
	</artical>
	<!--这是专页-->
	<artical>
		<head>大标题</head>
		<subHead>小标题</subHead>
		<writer>佚名</writer>
		<image>App/MoleTimesChildAppData/times00001/imageData/img1.jpg</image>
		<sampleText>
			乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅v乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅v乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅乐仔最帅v
		</sampleText>
		<detial></detial><!--不用填-->
	</artical>
	<preview>
		叭叭叭这是预告
	</preview>
	<unSupport>
		<li></li>
		<li></li>
		<li></li>
	</unSupport>
</body>
</moleTimes>
